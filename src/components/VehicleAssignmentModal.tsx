
import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";
import { sendTelegramMessage } from "@/lib/telegramConfig";

interface OrderInfo {
  id: number;
  customer_name: string;
  telegram_username?: string;
  telegram_user_id?: string;
}

interface VehicleAssignmentModalProps {
  isOpen: boolean;
  onClose: () => void;
  selectedOrders: OrderInfo[];
  complexId?: number;
  complexName?: string;
}

export function VehicleAssignmentModal({
  isOpen,
  onClose,
  selectedOrders,
  complexId,
  complexName,
}: VehicleAssignmentModalProps) {
  const [vehicleInfo, setVehicleInfo] = useState("");
  const [driverName, setDriverName] = useState("");
  const [driverPhone, setDriverPhone] = useState("");
  const [sending, setSending] = useState(false);
  
  // Track success and failure counts
  const [successCount, setSuccessCount] = useState(0);
  const [failureCount, setFailureCount] = useState(0);

  const handleAssign = async () => {
    if (!vehicleInfo) {
      toast.error("–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ");
      return;
    }

    try {
      setSending(true);
      setSuccessCount(0);
      setFailureCount(0);
      
      // Format the message
      const message = `üöö <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ</b>\n\n` +
        `–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: ${vehicleInfo}\n` +
        (driverName ? `–í–æ–¥–∏—Ç–µ–ª—å: ${driverName}\n` : '') +
        (driverPhone ? `–¢–µ–ª–µ—Ñ–æ–Ω: ${driverPhone}\n` : '') +
        (complexName ? `\n–ñ–ö: ${complexName}\n` : '') +
        `\n–°–∫–æ—Ä–æ –¥–æ—Å—Ç–∞–≤–∏–º –≤–∞—à –∑–∞–∫–∞–∑! –û–∂–∏–¥–∞–π—Ç–µ.`;
      
      // Send messages to all selected orders
      const sendPromises = selectedOrders.map(async (order) => {
        const recipient = order.telegram_user_id || order.telegram_username;
        if (!recipient) return { success: false, orderId: order.id };
        
        try {
          const result = await sendTelegramMessage(recipient, message, {
            parseMode: "HTML",
          });
          
          return { 
            success: result.ok, 
            orderId: order.id,
            error: result.ok ? null : "–û—à–∏–±–∫–∞ API Telegram"
          };
        } catch (error) {
          console.error(`Error sending message to order #${order.id}:`, error);
          return { 
            success: false, 
            orderId: order.id,
            error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
          };
        }
      });
      
      // Wait for all message sending attempts to complete
      const results = await Promise.all(sendPromises);
      
      // Count successes and failures
      const successes = results.filter(r => r && r.success).length;
      const failures = results.filter(r => r && !r.success).length;
      
      setSuccessCount(successes);
      setFailureCount(failures);
      
      // Update order statuses to "delivering" if they're not already
      if (selectedOrders.length > 0) {
        const orderIds = selectedOrders.map(order => order.id);
        
        const { error } = await supabase
          .from('orders')
          .update({ status: 'delivering' })
          .in('id', orderIds)
          .eq('status', 'processing'); // Only change status if it's currently "processing"
        
        if (error) {
          console.error("Error updating order statuses:", error);
          toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤");
        } else {
          // Status updated successfully
          if (successes > 0) {
            toast.success(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${successes} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º`);
          }
          
          if (failures > 0) {
            toast.warning(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é ${failures} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º, –Ω–æ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);
          }
        }
      } else if (successes > 0) {
        toast.success(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${successes} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º`);
      }
      
      // Close modal if at least some messages were sent successfully or if all orders were updated
      if (successes > 0 || failures === 0) {
        onClose();
      }
      
    } catch (error) {
      console.error("Error assigning vehicle:", error);
      toast.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞");
    } finally {
      setSending(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç</DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4 py-4">
          <div>
            <Label htmlFor="vehicle">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ</Label>
            <Input
              id="vehicle"
              value={vehicleInfo}
              onChange={(e) => setVehicleInfo(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–µ–ª–∞—è –ì–∞–∑–µ–ª—å –ê123–ë–í"
              className="mt-1"
            />
          </div>
          
          <div>
            <Label htmlFor="driver">–í–æ–¥–∏—Ç–µ–ª—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
            <Input
              id="driver"
              value={driverName}
              onChange={(e) => setDriverName(e.target.value)}
              placeholder="–§–ò–û –≤–æ–¥–∏—Ç–µ–ª—è"
              className="mt-1"
            />
          </div>
          
          <div>
            <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</Label>
            <Input
              id="phone"
              value={driverPhone}
              onChange={(e) => setDriverPhone(e.target.value)}
              placeholder="+7 (999) 123-45-67"
              className="mt-1"
            />
          </div>
          
          <div className="text-sm text-muted-foreground">
            <p>–í—ã–±—Ä–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {selectedOrders.length}</p>
            {complexName && <p>–ñ–ö: {complexName}</p>}
            {failureCount > 0 && (
              <p className="text-amber-500 mt-2">
                –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–µ –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ,
                –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª–∏ —á–∞—Ç.
              </p>
            )}
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button onClick={handleAssign} disabled={sending}>
            {sending ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–ù–∞–∑–Ω–∞—á–∏—Ç—å"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

export default VehicleAssignmentModal;
